 "rubygems"
require "bundler/setup"
require "stringex"

## -- Rsync Deploy config -- ##
# Be sure your public key is listed in your server's ~/.ssh/authorized_keys file
ssh_user       = "user@domain.com"
ssh_port       = "22"
document_root  = "~/website.com/"
rsync_delete   = true
deploy_default = "push"

# This will be configured for you when you run config_deploy
deploy_branch  = "gh-pages"

## -- Misc Configs -- ##

public_dir     = "public/phpjs"    # compiled site directory
source_dir     = "source"    # source file directory
blog_index_dir = 'source'    # directory for your blog's index page (if you put your index in source/blog/index.html, set this to 'source/blog')
deploy_dir     = "_deploy"   # deploy directory (for Github pages deployment)
stash_dir      = "_stash"    # directory to stash posts for speedy generation
posts_dir      = "_posts"    # directory for blog files
themes_dir     = ".themes"   # directory for blog files
new_post_ext   = "markdown"  # default new post file extension when using the new_post task
new_page_ext   = "markdown"  # default new page file extension when using the new_page task
server_port    = "4000"      # port for preview server eg. localhost:4000


desc "Build jekyll source by php.js source"
task :build do
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  octodir = Dir.pwd()
  phpjsdir = "#{octodir}/.."

  require "cgi"
  require "json"
  legacy_comments = JSON(File.read("#{octodir}/#{source_dir}/legacy_comments.json"))
  authors = {}

  page_catsinc_file = "#{octodir}/#{source_dir}/_includes/custom/asides/category_list.html"
  page_cats_inc = File.open(page_catsinc_file, 'w')
  page_cats_inc.puts "<!-- Generated by Rakefile:build -->"
  page_cats_inc.puts "<section>"
  page_cats_inc.puts "<h1>Categories</h1>"
  page_cats_inc.puts "<ul id='category-list'>"

  page_fncs_dir  = "#{octodir}/#{source_dir}/functions"
  page_fncs_file = "#{page_fncs_dir}/index.#{new_post_ext}"
  mkdir_p page_fncs_dir unless File.directory? page_fncs_dir
  page_fncs = File.open(page_fncs_file, 'w')
  page_fncs.puts "---"
  page_fncs.puts "layout: page"
  page_fncs.puts "title: \"PHP functions for JavaScript\""
  page_fncs.puts "comments: false"
  page_fncs.puts "sharing: true"
  page_fncs.puts "footer: true"
  page_fncs.puts "alias:"
  page_fncs.puts "- /functions/index"
  page_fncs.puts "- /categories/index"
  page_fncs.puts "- /categories"
  page_fncs.puts "- /packages/index"
  page_fncs.puts "- /packages"
  page_fncs.puts "---"
  page_fncs.puts "<!-- Generated by Rakefile:build -->"
  page_fncs.puts "If you are missing functions, there is a chance you may find them in our [experimental](https://github.com/kvz/phpjs/tree/master/experimental) "
  page_fncs.puts "and [workbench](https://github.com/kvz/phpjs/tree/master/workbench) folders. Warning: we keep "
  page_fncs.puts "these functions there for a reason.  "


  Dir.chdir("../functions")
  Dir.glob("*/").each { |dir|
    category = dir.gsub /\//, ''
    next if File.file? dir or category[0] == '_'
    page_cat_dir  = "#{octodir}/#{source_dir}/categories/#{category}"
    page_cat_file = "#{page_cat_dir}/index.#{new_post_ext}"
    mkdir_p page_cat_dir unless File.directory? page_cat_dir
    page_cat = File.open(page_cat_file, 'w')

    page_catinc_file = "#{octodir}/#{source_dir}/_includes/custom/#{category}.html"
    page_cat_inc = File.open(page_catinc_file, 'w')
    page_cat_inc.puts "<!-- Generated by Rakefile:build -->"


    page_cat.puts "---"
    page_cat.puts "layout: page"
    page_cat.puts "title: \"JavaScript #{category} functions\""
    page_cat.puts "comments: false"
    page_cat.puts "sharing: false"
    page_cat.puts "footer: true"
    page_cat.puts "---"
    page_cat.puts "<!-- Generated by Rakefile:build -->"
    page_cat.puts ""

    page_cats_inc.puts "<li><a href=\"/categories/#{category}\">#{category}</a></li>"
    page_cats_inc.puts ""

    page_fncs.puts "\n## #{category}\n"


    Dir.chdir(dir)
    Dir.glob("*.js").each { |file|
      function = file.gsub /\.js$/, ''
      next if File.directory? file or function[0] == '_'
      page_fnc_dir  = "#{octodir}/#{source_dir}/functions/#{function}"
      page_fnc_file = "#{page_fnc_dir}/index.#{new_post_ext}"
      page_cmt_file = "#{page_fnc_dir}/_comments.html"
      page_cmt_partial = "functions/#{function}/_comments.html"

      mkdir_p page_fnc_dir unless File.directory? page_fnc_dir
      page_fnc = File.open(page_fnc_file, 'w')
      puts "Creating page_fnc: #{page_fnc_file}"

      page_cat.puts " - [#{function}](/functions/#{function})"
      page_fncs.puts " - [#{function}](/functions/#{function})"
      page_cat_inc.puts " - [#{function}](/functions/#{function})"

      id = `cat #{octodir}/#{source_dir}/id-mapping.txt |egrep [[:space:]]#{function}\$ |awk '{print \$1}'`
      page_fnc.puts "---"
      page_fnc.puts "layout: page"
      page_fnc.puts "title: \"JavaScript #{function} function\""
      page_fnc.puts "comments: true"
      page_fnc.puts "sharing: true"
      page_fnc.puts "footer: true"
      page_fnc.puts "alias:"
      page_fnc.puts "- /functions/view/#{function}:#{id}"
      page_fnc.puts "- /functions/view/#{function}"
      page_fnc.puts "- /functions/view/#{id}"
      page_fnc.puts "- /functions/#{function}:#{id}"
      page_fnc.puts "- /functions/#{id}"
      page_fnc.puts "---"
      page_fnc.puts "<!-- Generated by Rakefile:build -->"

      page_fnc.puts "A JavaScript equivalent of PHP's #{function}"
      page_fnc.puts ""

      contents = File.read("#{phpjsdir}/functions/#{category}/#{function}.js")

      keys = {}
      contents.scan(/^\s*[\/\*]*\s*([\+\-\%\*])\s*([a-z0-9\ ]+):\s*(.*)$/).each { |sign, key, val|
        val = val.strip
        if sign === '+'
          if authors[val]
            authors[val] = authors[val] + 1
          else
            authors[val] = 1
          end
        end

        if keys[key]
          keys[key] += "\n#{val}"
        else
          keys[key] = val
        end
      }

      page_fnc.puts "{% codeblock #{category}/#{function}.js lang:js https://raw.github.com/kvz/phpjs/master/functions/#{category}/#{function}.js raw on github %}"
      page_fnc.puts "#{contents}"
      page_fnc.puts "{% endcodeblock %}"
      page_fnc.puts ""
      page_fnc.puts " - [Raw function on GitHub](https://github.com/kvz/phpjs/blob/master/functions/#{category}/#{function}.js)"
      page_fnc.puts ""
      page_fnc.puts "Please note that php.js uses JavaScript objects as substitutes for PHP arrays, they are "
      page_fnc.puts "the closest match to this hashtable-like data structure. "
      page_fnc.puts ""
      page_fnc.puts "Please also note that php.js offers community built functions and goes by the "
      page_fnc.puts "[McDonald's Theory](https://medium.com/what-i-learned-building/9216e1c9da7d). We'll put online "
      page_fnc.puts "functions that are far from perfect, in the hopes to spark better contributions. "
      page_fnc.puts "Do you have one? Then please just: "
      page_fnc.puts ""
      page_fnc.puts " - [Edit on GitHub](https://github.com/kvz/phpjs/edit/master/functions/#{category}/#{function}.js)"
      page_fnc.puts ""

      ['1', '2', '3'].each do |i|
        if keys["example #{i}"] && keys["returns #{i}"]
          page_fnc.puts "### Example #{i}"
          page_fnc.puts "This code"
          page_fnc.puts "{% codeblock lang:js example %}"
          page_fnc.puts keys["example #{i}"]
          page_fnc.puts "{% endcodeblock %}"
          page_fnc.puts ""

          page_fnc.puts "Should return"
          page_fnc.puts "{% codeblock lang:js returns %}"
          page_fnc.puts keys["returns #{i}"]
          page_fnc.puts "{% endcodeblock %}"
          page_fnc.puts ""
        end
      end


      page_fnc.puts ""
      page_fnc.puts "### Other PHP functions in the #{category} extension"

      page_fnc.puts "{% render_partial _includes/custom/#{category}.html %}"

      # if legacy_comments[function]
      #   page_fnc.puts "## Legacy comments"
      #   page_fnc.puts "<a href=\"javascript:$('#legacy_comments').css('maxHeight', '500px');\">Show comments</a> that were imported from our old site. Please use disqus below for new comments"
      #   page_fnc.puts "<div style=\"overflow-y: scroll; max-height: 0px;\" id=\"legacy_comments\">"
      #   page_fnc.puts "{% render_partial #{page_cmt_partial} %}"
      #   page_cmt = File.open(page_cmt_file, 'w')
      #   page_cmt.puts "<!-- Generated by Rakefile:build -->"
      #   legacy_comments[function].reverse.each do |comment|
      #     cleancomment = comment['comment']
      #     cleancomment = CGI.escapeHTML(cleancomment)
      #     cleancomment = cleancomment.gsub /\[code[^\]]*\]/i, '<pre><code>'
      #     cleancomment = cleancomment.gsub /\[\/code\]/i, '</code></pre>'
      #     page_cmt.puts ""
      #     page_cmt.puts "<strong>"
      #     if comment['url'].strip.length > 0
      #       page_cmt.puts "<a href=\"#{comment['url']}\" rel=\"nofollow\">#{comment['author']}</a>"
      #     else
      #       page_cmt.puts "#{comment['author']}"
      #     end
      #     page_cmt.puts "</strong>"
      #     page_cmt.puts "on #{comment['date']} <br />"

      #     page_cmt.puts "#{cleancomment}"
      #     page_cmt.puts "<hr />"
      #     page_cmt.puts ""
      #   end
      #   page_fnc.puts "</div>"
      #   page_cmt.close
      # end

      page_fnc.close
    }

    page_cat.close
    page_cat_inc.close

    Dir.chdir("..")
  }

  page_cats_inc.puts "</ul>"
  page_cats_inc.puts "</section>"
  page_cats_inc.close

  page_fncs.close


  Dir.chdir(octodir)

  # Authors
  page_auth_dir  = "#{octodir}/#{source_dir}/authors"
  page_auth_file = "#{page_auth_dir}/index.#{new_post_ext}"
  mkdir_p page_auth_dir unless File.directory? page_auth_dir
  page_auth = File.open(page_auth_file, 'w')
  page_auth.puts "---"
  page_auth.puts "layout: page"
  page_auth.puts "title: \"Authors\""
  page_auth.puts "comments: false"
  page_auth.puts "sharing: true"
  page_auth.puts "footer: true"
  page_auth.puts "---"
  page_auth.puts "<!-- Generated by Rakefile:build -->"


  page_auth.puts ""
  page_auth.puts "Here are all people involved with php.js"
  page_auth.puts ""
  page_auth.puts "{% render_partial _includes/custom/community.html %}"
  system "node_modules/on-the-githubs/bin/in-the-githubs \
     --user kvz \
     --repo phpjs \
     --format html \
     --concurrency 5 \
     --output source/_includes/custom/community.html \
     --debug"

  # page_auth.puts ""
  # page_auth.puts "Before Github, we"
  # page_auth.puts "Checkout the [repository's contributors](https://github.com/kvz/phpjs/graphs/contributors), or browse "
  # page_auth.puts "Checkout the [repository's contributors](https://github.com/kvz/phpjs/graphs/contributors), or browse "
  # page_auth.puts "these authors that contributed via the old site's commenting system (before we had GitHub :)  "
  # page_auth.puts ""
  # page_auth.puts ""

  # authors.sort.map { |author, count|
  #   m    = /\s*([^\(]+)(\s*\(([^\(]+)\))?/.match(author)
  #   name = m[1].strip
  #   url  = ""
  #   if m[3]
  #     url = m[3].strip
  #   end
  #   strong = ""
  #   if count > 30
  #     strong = "**"
  #   end

  #   if url.length > 0
  #     page_auth.puts " - #{strong}[#{name}](#{url})#{strong} (#{count})"
  #   else
  #     page_auth.puts " - #{strong}#{name}#{strong} (#{count})"
  #   end
  # }
  page_auth.close


end

desc "Initial setup for Octopress: copies the default theme into the path of Jekyll's generator. Rake install defaults to rake install[classic] to install a different theme run rake install[some_theme_name]"
task :install, :theme do |t, args|
  if File.directory?(source_dir) || File.directory?("sass")
    abort("rake aborted!") if ask("A theme is already installed, proceeding will overwrite existing files. Are you sure?", ['y', 'n']) == 'n'
  end
  # copy theme into working Jekyll directories
  theme = args.theme || 'classic'
  puts "## Copying "+theme+" theme into ./#{source_dir} and ./sass"
  mkdir_p source_dir
  cp_r "#{themes_dir}/#{theme}/source/.", source_dir
  mkdir_p "sass"
  cp_r "#{themes_dir}/#{theme}/sass/.", "sass"
  mkdir_p "#{source_dir}/#{posts_dir}"
  mkdir_p public_dir
end

#######################
# Working with Jekyll #
#######################

desc "Generate jekyll site"
task :generate do
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  puts "## Generating Site with Jekyll"
  system "compass compile --css-dir #{source_dir}/stylesheets"
  system "jekyll"
end

desc "Watch the site and regenerate when it changes"
task :watch do
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  puts "Starting to watch source with Jekyll and Compass."
  system "compass compile --css-dir #{source_dir}/stylesheets" unless File.exist?("#{source_dir}/stylesheets/screen.css")
  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=>"preview"}, "jekyll --auto")
  compassPid = Process.spawn("compass watch")

  trap("INT") {
    [jekyllPid, compassPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
    exit 0
  }

  [jekyllPid, compassPid].each { |pid| Process.wait(pid) }
end

desc "preview the site in a web browser"
task :preview do
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  puts "Starting to watch source with Jekyll and Compass. Starting Rack on port #{server_port}"
  system "compass compile --css-dir #{source_dir}/stylesheets" unless File.exist?("#{source_dir}/stylesheets/screen.css")
  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=>"preview"}, "jekyll --auto")
  compassPid = Process.spawn("compass watch")
  rackupPid = Process.spawn("rackup --port #{server_port}")

  trap("INT") {
    [jekyllPid, compassPid, rackupPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
    exit 0
  }

  [jekyllPid, compassPid, rackupPid].each { |pid| Process.wait(pid) }
end

# usage rake new_post[my-new-post] or rake new_post['my new post'] or rake new_post (defaults to "new-post")
desc "Begin a new post in #{source_dir}/#{posts_dir}"
task :new_post, :title do |t, args|
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  mkdir_p "#{source_dir}/#{posts_dir}"
  args.with_defaults(:title => 'new-post')
  title = args.title
  filename = "#{source_dir}/#{posts_dir}/#{Time.now.strftime('%Y-%m-%d')}-#{title.to_url}.#{new_post_ext}"
  if File.exist?(filename)
    abort("rake aborted!") if ask("#{filename} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
  end
  puts "Creating new post: #{filename}"
  open(filename, 'w') do |post|
    post.puts "---"
    post.puts "layout: post"
    post.puts "title: \"#{title.gsub(/&/,'&amp;')}\""
    post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
    post.puts "comments: true"
    post.puts "categories: "
    post.puts "---"
  end
end

# usage rake new_page[my-new-page] or rake new_page[my-new-page.html] or rake new_page (defaults to "new-page.markdown")
desc "Create a new page in #{source_dir}/(filename)/index.#{new_page_ext}"
task :new_page, :filename do |t, args|
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  args.with_defaults(:filename => 'new-page')
  page_dir = [source_dir]
  if args.filename.downcase =~ /(^.+\/)?(.+)/
    filename, dot, extension = $2.rpartition('.').reject(&:empty?)         # Get filename and extension
    title = filename
    page_dir.concat($1.downcase.sub(/^\//, '').split('/')) unless $1.nil?  # Add path to page_dir Array
    if extension.nil?
      page_dir << filename
      filename = "index"
    end
    extension ||= new_page_ext
    page_dir = page_dir.map! { |d| d = d.to_url }.join('/')                # Sanitize path
    filename = filename.downcase.to_url

    mkdir_p page_dir
    file = "#{page_dir}/#{filename}.#{extension}"
    if File.exist?(file)
      abort("rake aborted!") if ask("#{file} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
    end
    puts "Creating new page: #{file}"
    open(file, 'w') do |page|
      page.puts "---"
      page.puts "layout: page"
      page.puts "title: \"#{title}\""
      page.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
      page.puts "comments: true"
      page.puts "sharing: true"
      page.puts "footer: true"
      page.puts "---"
    end
  else
    puts "Syntax error: #{args.filename} contains unsupported characters"
  end
end

# usage rake isolate[my-post]
desc "Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much quicker."
task :isolate, :filename do |t, args|
  stash_dir = "#{source_dir}/#{stash_dir}"
  FileUtils.mkdir(stash_dir) unless File.exist?(stash_dir)
  Dir.glob("#{source_dir}/#{posts_dir}/*.*") do |post|
    FileUtils.mv post, stash_dir unless post.include?(args.filename)
  end
end

desc "Move all stashed posts back into the posts directory, ready for site generation."
task :integrate do
  FileUtils.mv Dir.glob("#{source_dir}/#{stash_dir}/*.*"), "#{source_dir}/#{posts_dir}/"
end

desc "Clean out caches: .pygments-cache, .gist-cache, .sass-cache"
task :clean do
  rm_rf [".pygments-cache/**", ".gist-cache/**", ".sass-cache/**", "source/stylesheets/screen.css"]
end

desc "Move sass to sass.old, install sass theme updates, replace sass/custom with sass.old/custom"
task :update_style, :theme do |t, args|
  theme = args.theme || 'classic'
  if File.directory?("sass.old")
    puts "removed existing sass.old directory"
    rm_r "sass.old", :secure=>true
  end
  mv "sass", "sass.old"
  puts "## Moved styles into sass.old/"
  cp_r "#{themes_dir}/"+theme+"/sass/", "sass"
  cp_r "sass.old/custom/.", "sass/custom"
  puts "## Updated Sass ##"
end

desc "Move source to source.old, install source theme updates, replace source/_includes/navigation.html with source.old's navigation"
task :update_source, :theme do |t, args|
  theme = args.theme || 'classic'
  if File.directory?("#{source_dir}.old")
    puts "## Removed existing #{source_dir}.old directory"
    rm_r "#{source_dir}.old", :secure=>true
  end
  mkdir "#{source_dir}.old"
  cp_r "#{source_dir}/.", "#{source_dir}.old"
  puts "## Copied #{source_dir} into #{source_dir}.old/"
  cp_r "#{themes_dir}/"+theme+"/source/.", source_dir, :remove_destination=>true
  cp_r "#{source_dir}.old/_includes/custom/.", "#{source_dir}/_includes/custom/", :remove_destination=>true
  cp "#{source_dir}.old/favicon.png", source_dir
  mv "#{source_dir}/index.html", "#{blog_index_dir}", :force=>true if blog_index_dir != source_dir
  cp "#{source_dir}.old/index.html", source_dir if blog_index_dir != source_dir && File.exists?("#{source_dir}.old/index.html")
  puts "## Updated #{source_dir} ##"
end

##############
# Deploying  #
##############

desc "Default deploy task"
task :deploy do
  # Check if preview posts exist, which should not be published
  if File.exists?(".preview-mode")
    puts "## Found posts in preview mode, regenerating files ..."
    File.delete(".preview-mode")
    Rake::Task[:generate].execute
  end

  Rake::Task[:copydot].invoke(source_dir, public_dir)
  Rake::Task["#{deploy_default}"].execute
end

desc "Generate website and deploy"
task :gen_deploy => [:integrate, :generate, :deploy] do
end

desc "copy dot files for deployment"
task :copydot, :source, :dest do |t, args|
  FileList["#{args.source}/**/.*"].exclude("**/.", "**/..", "**/.DS_Store", "**/._*").each do |file|
    cp_r file, file.gsub(/#{args.source}/, "#{args.dest}") unless File.directory?(file)
  end
end

desc "Deploy website via rsync"
task :rsync do
  exclude = ""
  if File.exists?('./rsync-exclude')
    exclude = "--exclude-from '#{File.expand_path('./rsync-exclude')}'"
  end
  puts "## Deploying website via Rsync"
  ok_failed system("rsync -avze 'ssh -p #{ssh_port}' #{exclude} #{"--delete" unless rsync_delete == false} #{public_dir}/ #{ssh_user}:#{document_root}")
end

desc "deploy public directory to github pages"
multitask :push do
  puts "## Deploying branch to Github Pages "
  (Dir["#{deploy_dir}/*"]).each { |f| rm_rf(f) }
  Rake::Task[:copydot].invoke(public_dir, deploy_dir)
  puts "\n## copying #{public_dir} to #{deploy_dir}"

  rm_rf deploy_dir
  mkdir deploy_dir
  cp_r "#{public_dir}/.", deploy_dir
  cd "#{deploy_dir}" do
    system "git init"
    system "git checkout -B gh-pages"
    system "git remote add origin git@github.com:kvz/phpjs"
    system "git add --all ."
    puts "\n## Commiting: Site updated at #{Time.now.utc}"
    message = "Site updated at #{Time.now.utc}"
    system "git commit -anm \"#{message}\""
    puts "\n## Pushing generated #{deploy_dir} website"
    system "git push origin #{deploy_branch} --force"
    puts "\n## Github Pages deploy complete"
  end
end

desc "Update configurations to support publishing to root or sub directory"
task :set_root_dir, :dir do |t, args|
  puts ">>> !! Please provide a directory, eg. rake config_dir[publishing/subdirectory]" unless args.dir
  if args.dir
    if args.dir == "/"
      dir = ""
    else
      dir = "/" + args.dir.sub(/(\/*)(.+)/, "\\2").sub(/\/$/, '');
    end
    rakefile = IO.read(__FILE__)
    rakefile.sub!(/public_dir(\s*)=(\s*)(["'])[\w\-\/]*["']/, "public_dir\\1=\\2\\3public#{dir}\\3")
    File.open(__FILE__, 'w') do |f|
      f.write rakefile
    end
    compass_config = IO.read('config.rb')
    compass_config.sub!(/http_path(\s*)=(\s*)(["'])[\w\-\/]*["']/, "http_path\\1=\\2\\3#{dir}/\\3")
    compass_config.sub!(/http_images_path(\s*)=(\s*)(["'])[\w\-\/]*["']/, "http_images_path\\1=\\2\\3#{dir}/images\\3")
    compass_config.sub!(/http_fonts_path(\s*)=(\s*)(["'])[\w\-\/]*["']/, "http_fonts_path\\1=\\2\\3#{dir}/fonts\\3")
    compass_config.sub!(/css_dir(\s*)=(\s*)(["'])[\w\-\/]*["']/, "css_dir\\1=\\2\\3public#{dir}/stylesheets\\3")
    File.open('config.rb', 'w') do |f|
      f.write compass_config
    end
    jekyll_config = IO.read('_config.yml')
    jekyll_config.sub!(/^destination:.+$/, "destination: public#{dir}")
    jekyll_config.sub!(/^subscribe_rss:\s*\/.+$/, "subscribe_rss: #{dir}/atom.xml")
    jekyll_config.sub!(/^root:.*$/, "root: /#{dir.sub(/^\//, '')}")
    File.open('_config.yml', 'w') do |f|
      f.write jekyll_config
    end
    rm_rf public_dir
    mkdir_p "#{public_dir}#{dir}"
    puts "## Site's root directory is now '/#{dir.sub(/^\//, '')}' ##"
  end
end

desc "Set up _deploy folder and deploy branch for Github Pages deployment"
task :setup_github_pages, :repo do |t, args|
  if args.repo
    repo_url = args.repo
  else
    puts "Enter the read/write url for your repository"
    puts "(For example, 'git@github.com:your_username/your_username.github.com)"
    repo_url = get_stdin("Repository url: ")
  end
  user = repo_url.match(/:([^\/]+)/)[1]
  branch = (repo_url.match(/\/[\w-]+.github.com/).nil?) ? 'gh-pages' : 'master'
  project = (branch == 'gh-pages') ? repo_url.match(/\/([^\.]+)/)[1] : ''
  unless `git remote -v`.match(/origin.+?octopress.git/).nil?
    # If octopress is still the origin remote (from cloning) rename it to octopress
    system "git remote rename origin octopress"
    if branch == 'master'
      # If this is a user/organization pages repository, add the correct origin remote
      # and checkout the source branch for committing changes to the blog source.
      system "git remote add origin #{repo_url}"
      puts "Added remote #{repo_url} as origin"
      system "git config branch.master.remote origin"
      puts "Set origin as default remote"
      system "git branch -m master source"
      puts "Master branch renamed to 'source' for committing your blog source files"
    else
      unless !public_dir.match("#{project}").nil?
        system "rake set_root_dir[#{project}]"
      end
    end
  end
  url = "http://#{user}.github.com"
  url += "/#{project}" unless project == ''
  jekyll_config = IO.read('_config.yml')
  jekyll_config.sub!(/^url:.*$/, "url: #{url}")
  File.open('_config.yml', 'w') do |f|
    f.write jekyll_config
  end
  rm_rf deploy_dir
  mkdir deploy_dir
  cd "#{deploy_dir}" do
    system "git init"
    system "echo 'My Octopress Page is coming soon &hellip;' > index.html"
    system "git add ."
    system "git commit -m \"Octopress init\""
    system "git branch -m gh-pages" unless branch == 'master'
    system "git remote add origin #{repo_url}"
    rakefile = IO.read(__FILE__)
    rakefile.sub!(/deploy_branch(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_branch\\1=\\2\\3#{branch}\\3")
    rakefile.sub!(/deploy_default(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_default\\1=\\2\\3push\\3")
    File.open(__FILE__, 'w') do |f|
      f.write rakefile
    end
  end
  puts "\n---\n## Now you can deploy to #{url} with `rake deploy` ##"
end

def ok_failed(condition)
  if (condition)
    puts "OK"
  else
    puts "FAILED"
  end
end

def get_stdin(message)
  print message
  STDIN.gets.chomp
end

def ask(message, valid_options)
  if valid_options
    answer = get_stdin("#{message} #{valid_options.to_s.gsub(/"/, '').gsub(/, /,'/')} ") while !valid_options.include?(answer)
  else
    answer = get_stdin(message)
  end
  answer
end

desc "list tasks"
task :list do
  puts "Tasks: #{(Rake::Task.tasks - [Rake::Task[:list]]).join(', ')}"
  puts "(type rake -T for more detail)\n\n"
end
